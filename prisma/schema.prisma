generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String            @id @default(cuid())
  telegramId String            @unique
  firstName  String?
  lastName   String?
  username   String?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  favorites  FavoriteVideo[]
  profile    Profile?
  sessions   TrainingSession[]

  @@map("users")
}

model Profile {
  id            String   @id @default(cuid())
  userId        String   @unique
  position      String?
  number        Int?
  age           Int?
  height        Int?
  weight        Int?
  strength      Int      @default(0)
  endurance     Int      @default(0)
  speed         Int      @default(0)
  technique     Int      @default(0)
  overall       Int      @default(0)
  dailyProgress Int      @default(0)
  maxDailyGoal  Int      @default(10)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Trainer {
  id          String   @id @default(cuid())
  name        String
  lastName    String
  speciality  String
  experience  Int
  rating      Float    @default(5.0)
  avatar      String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  videos      Video[]

  @@map("trainers")
}

model Video {
  id          String            @id @default(cuid())
  title       String
  description String?
  duration    Int
  videoUrl    String
  thumbnail   String?
  category    VideoCategory
  difficulty  VideoDifficulty
  trainerId   String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  favorites   FavoriteVideo[]
  sessions    TrainingSession[]
  trainer     Trainer           @relation(fields: [trainerId], references: [id])

  @@map("videos")
}

model TrainingSession {
  id        String   @id @default(cuid())
  userId    String
  videoId   String
  completed Boolean  @default(false)
  duration  Int?
  progress  Float    @default(0)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])

  @@map("training_sessions")
}

model FavoriteVideo {
  id        String   @id @default(cuid())
  userId    String
  videoId   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])

  @@unique([userId, videoId])
  @@map("favorite_videos")
}

enum VideoCategory {
  STRENGTH
  ENDURANCE
  SPEED
  TECHNIQUE
  TACTICAL
  GOALKEEPER
  GENERAL
}

enum VideoDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}
