import { NextRequest, NextResponse } from 'next/server';

// –¢–∏–ø—ã –¥–ª—è Telegram API
interface TelegramMessage {
  message_id: number;
  from: {
    id: number;
    first_name?: string;
    last_name?: string;
    username?: string;
  };
  chat: {
    id: number;
    type: string;
  };
  text?: string;
}

interface TelegramCallbackQuery {
  id: string;
  from: {
    id: number;
    first_name?: string;
    last_name?: string;
    username?: string;
  };
  message: TelegramMessage;
  data?: string;
}

interface TelegramUpdate {
  update_id: number;
  message?: TelegramMessage;
  callback_query?: TelegramCallbackQuery;
}

interface InlineKeyboard {
  reply_markup: {
    inline_keyboard: Array<Array<{
      text: string;
      web_app?: { url: string };
      callback_data?: string;
    }>>;
  };
}

const BOT_TOKEN = process.env.BOT_TOKEN;
const WEB_APP_URL = process.env.WEB_APP_URL || 'https://trenki-mvp.vercel.app';

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendMessage(chatId: number, text: string, replyMarkup?: InlineKeyboard) {
  const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
  
  const body = {
    chat_id: chatId,
    text,
    parse_mode: 'Markdown',
    ...replyMarkup
  };

  const response = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(body)
  });

  return response.json();
}

// –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
async function editMessage(chatId: number, messageId: number, text: string, replyMarkup?: InlineKeyboard) {
  const url = `https://api.telegram.org/bot${BOT_TOKEN}/editMessageText`;
  
  const body = {
    chat_id: chatId,
    message_id: messageId,
    text,
    parse_mode: 'Markdown',
    ...replyMarkup
  };

  const response = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(body)
  });

  return response.json();
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback query
async function answerCallbackQuery(callbackQueryId: string) {
  const url = `https://api.telegram.org/bot${BOT_TOKEN}/answerCallbackQuery`;
  
  const response = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ callback_query_id: callbackQueryId })
  });

  return response.json();
}

export async function POST(request: NextRequest) {
  try {
    const body: TelegramUpdate = await request.json();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (body.message) {
      const message = body.message;
      const chatId = message.chat.id;
      const text = message.text;
      const firstName = message.from.first_name || '–¥—Ä—É–≥';

      // –ö–æ–º–∞–Ω–¥–∞ /start
      if (text === '/start') {
        const welcomeMessage = `
üëã –ü—Ä–∏–≤–µ—Ç, ${firstName}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **Trenki** - —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫! üí™

üî• –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –°–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ 
‚Ä¢ –ò–∑—É—á–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤
‚Ä¢ –î–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ! üëá
        `;

        const keyboard = {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å Trenki',
                  web_app: {
                    url: WEB_APP_URL
                  }
                }
              ],
              [
                {
                  text: 'üí™ –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
                  callback_data: 'about'
                },
                {
                  text: '‚ùì –ü–æ–º–æ—â—å',
                  callback_data: 'help'
                }
              ]
            ]
          }
        };

        await sendMessage(chatId, welcomeMessage, keyboard);
      } 
      // –î—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      else {
        const responseMessage = `
–ü—Ä–∏–≤–µ—Ç! üëã 

–Ø –±–æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è **Trenki** - —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫! 

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start

üí™ –£–¥–∞—á–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!
        `;

        const keyboard = {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å Trenki',
                  web_app: {
                    url: WEB_APP_URL
                  }
                }
              ]
            ]
          }
        };

        await sendMessage(chatId, responseMessage, keyboard);
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries (–∫–Ω–æ–ø–∫–∏)
    if (body.callback_query) {
      const callbackQuery = body.callback_query;
      const message = callbackQuery.message;
      const data = callbackQuery.data;
      const chatId = message.chat.id;
      const messageId = message.message_id;
      const firstName = callbackQuery.from.first_name || '–¥—Ä—É–≥';

      if (data === 'about') {
        const aboutMessage = `
üì± **–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Trenki**

Trenki - —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ñ–∏—Ç–Ω–µ—Å–∞ —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –∫–∞–∫ —É TikTok/Instagram Shorts, –Ω–æ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!

‚ú® **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (15-60 —Å–µ–∫)
‚Ä¢ Swipe –Ω–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏  
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–µ—Ä—ã
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

üéØ **–î–ª—è –∫–æ–≥–æ:**
‚Ä¢ –ù–æ–≤–∏—á–∫–∏ –≤ —Ñ–∏—Ç–Ω–µ—Å–µ
‚Ä¢ –û–ø—ã—Ç–Ω—ã–µ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ã
‚Ä¢ –¢—Ä–µ–Ω–µ—Ä—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã
‚Ä¢ –í—Å–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–µ!

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É –∑–¥–æ—Ä–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏! üí™
        `;

        const backKeyboard = {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å Trenki',
                  web_app: {
                    url: WEB_APP_URL
                  }
                }
              ],
              [
                {
                  text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                  callback_data: 'back_to_start'
                }
              ]
            ]
          }
        };

        await editMessage(chatId, messageId, aboutMessage, backKeyboard);
      }

      if (data === 'help') {
        const helpMessage = `
‚ùì **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é**

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º:**

1. üöÄ –ù–∞–∂–º–∏—Ç–µ "–û—Ç–∫—Ä—ã—Ç—å Trenki" 
2. üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø—Ä—è–º–æ –≤ Telegram
3. üëÜ –õ–∏—Å—Ç–∞–π—Ç–µ –≤–∏–¥–µ–æ —Å–≤–∞–π–ø–æ–º –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑
4. ‚ù§Ô∏è –°—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫–∏ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–º—Å—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º
5. üí¨ –ß–∏—Ç–∞–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ —Å–æ–≤–µ—Ç—ã

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:**
‚Ä¢ üè† –ì–ª–∞–≤–Ω–∞—è - –ª–µ–Ω—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
‚Ä¢ üé¨ –í–∏–¥–µ–æ - –ø–æ–ª–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏  
‚Ä¢ üì± Shorts - –∫–æ—Ä–æ—Ç–∫–∏–µ —Ä–æ–ª–∏–∫–∏

**–ü—Ä–æ–±–ª–µ–º—ã?**
–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞

–£–¥–∞—á–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫! üí™
        `;

        const backKeyboard = {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å Trenki',
                  web_app: {
                    url: WEB_APP_URL
                  }
                }
              ],
              [
                {
                  text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                  callback_data: 'back_to_start'
                }
              ]
            ]
          }
        };

        await editMessage(chatId, messageId, helpMessage, backKeyboard);
      }

      if (data === 'back_to_start') {
        const welcomeMessage = `
üëã –ü—Ä–∏–≤–µ—Ç, ${firstName}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **Trenki** - —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫! üí™

üî• –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –°–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ 
‚Ä¢ –ò–∑—É—á–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤
‚Ä¢ –î–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ! üëá
        `;

        const keyboard = {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å Trenki',
                  web_app: {
                    url: WEB_APP_URL
                  }
                }
              ],
              [
                {
                  text: 'üí™ –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
                  callback_data: 'about'
                },
                {
                  text: '‚ùì –ü–æ–º–æ—â—å',
                  callback_data: 'help'
                }
              ]
            ]
          }
        };

        await editMessage(chatId, messageId, welcomeMessage, keyboard);
      }

      await answerCallbackQuery(callbackQuery.id);
    }

    return NextResponse.json({ ok: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });
  }
}
